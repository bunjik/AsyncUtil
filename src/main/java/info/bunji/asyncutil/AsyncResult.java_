/*
 * Copyright 2016 Fumiharu Kinoshita
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package info.bunji.asyncutil;

import java.io.Closeable;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

/**
 ************************************************
 * aync execute result.
 * <p>
 * iterate access processed result.<br>
 * return result to immidiate, after call {@code AsyncEXecutor.execute()}.<br>
 * usage: (use try-with-resource):
 * <pre>
 * {@code
 * try (AsyncResults<String> as = AsyncExecutor.execute(new AsyncSearchProc())) {
 *   for (String r : as) {
 *     // process result.
 *   }
 * } // call close() on finally block.
 * }
 * </pre>
 * @author f.kinoshita
 * @param <T> result type
 ************************************************
 */
@Deprecated
public final class AsyncResult<T> implements Closeable, Iterable<T> {

	private final ClosableResult<T> results;

	public AsyncResult(AsyncProcess<T> asyncProc) {
		results = new ClosableResult<>(asyncProc);
	}

	public AsyncResult(AsyncProcess<T> asyncProc, int bufSize) {
		results = new ClosableResult<>(asyncProc, bufSize, false);
	}

	@Override
	public Iterator<T> iterator() {
		return results.iterator();
	}

	@Override
	public void close() throws IOException {
		results.close();
	}

	public List<T> block() {
		return results.toList();
	}

	/*
	 ********************************************
	 * (non Javadoc)
	 * @see java.lang.Object#finalize()
	 ********************************************
	 */
	@Override
	protected void finalize() throws Throwable {
		close();
		super.finalize();
	}
}
